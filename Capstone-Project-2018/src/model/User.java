<<<<<<< HEAD
<<<<<<< HEAD
/* Consider this as an parent class for the class "Admin" which the "Admin" class will inherit */ 
=======
>>>>>>> master
package model;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

<<<<<<< HEAD
//import javax.xml.bind.DatatypeConverter;

public class User
{
	private String email;
	private String password;
	private final TradingAccount account;
	
	public User(String email, String password, String name)
	{
		this.email = email;
		this.password = password;
		hashPassword(password);		
		
		account = new TradingAccount(name);
	}
	
	public String getEmail()
	{
		return email;
	}
	
	public TradingAccount getTradingAccount() {
		return account;
	}
	
	public void setEmail(String email)
	{
		this.email = email;
	}
	
	public String getPassword()
	{
		return password;
	}
	
	public void setPassword(String password)
	{
		this.password = password; 
	}
	
	public void hashPassword(String password) {
		
//		String hashedPassword;
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			md.update(password.getBytes());
			
			// create a string format of hash
//			byte[] digest = md.digest();			
//			hashedPassword = DatatypeConverter.printHexBinary(digest);
			
//			System.out.println("Password: " + password);
//			System.out.println("Hashed password: " + hashedPassword);
			
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public boolean passwordMatches(String passwordEntered) {
		
		hashPassword(passwordEntered);
		
		if(password.equals(passwordEntered))
			return true;
		
		return false;
	}
	
	@Override
	public String toString()
	{
		return "Email: " + email + "\n" + "Password: " + password + "\n";
	}

=======
/* Consider this as an parent class for the class "Admin" which the "Admin" class will inherit */ 
package model;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

//import javax.xml.bind.DatatypeConverter;

public class User
{
	private String email;
	private String password;
	private final TradingAccount account;
	
	public User(String email, String password, TradingAccount account)
	{
		this.email = email;;
		this.password = password;
		this.account = account;
	}
	
	public User(String email, String password, String name)
	{
		this.email = email;
		this.password = password;
		hashPassword(password);		
		
		account = new TradingAccount(name);
	}
	
	
=======
import javax.xml.bind.DatatypeConverter;

/**
 * Description This class contains all the variables relevant to a user object.
 * Matches the Users Table
 * @author Paul King -s3449513
 * @version 1.0
 * @since 30/10/2018
 */
public class User
{
	private final int id;
	private final String email;
	private String password;
	private boolean isAdmin;
	
	/**
	 * This is the constructor
	 * @param email The email address of the current user. This is also the username.
	 * @param password The user password. This will be in SHA1 format.
	 */
	public User(String email, String password)
	{
		this.id = 0;
		this.email = email;
		this.password = password;
	}
	
	/**
	 * Constructor 2
	 * @param id The unique identifier of user generated by the database
	 * @param email email The email address of the current user. This is also the username.
	 * @param password The user password. This will be in SHA1 format.
	 */
	public User(int id, String email, String password)
	{
		this.id = id;
		this.email = email;
		this.password = password;
	}
	
	/**
	 * Constructor 3
	 * @param id id The unique identifier of user generated by the database
	 * @param email email The email address of the current user. This is also the username.
	 * @param password The user password. This will be in SHA1 format.
	 * @param isAdmin determines whether the user is an Admin or a regular user
	 */
	public User(int id, String email, String password, boolean isAdmin) {
		this.id = id;
		this.email = email;
		this.password = password;
		this.isAdmin = isAdmin;
	}
	
	/**
	 * 
	 * @return returns the user id
	 */
	public int getId() {
		return id;
	}

	/**
	 * 
	 * @return retrieves the user email address. Also the username.
	 */
>>>>>>> master
	public String getEmail()
	{
		return email;
	}
	
<<<<<<< HEAD
	public TradingAccount getTradingAccount() {
		return account;
	}
	
	public void setEmail(String email)
	{
		this.email = email;
	}
	
=======
	/**
	 * 
	 * @return retrieves the password of the user
	 */
>>>>>>> master
	public String getPassword()
	{
		return password;
	}
	
<<<<<<< HEAD
=======
	/**
	 * Used to update the password
	 * @param password takes the new password as an argument
	 * @deprecated due to database implementation
	 */
>>>>>>> master
	public void setPassword(String password)
	{
		this.password = password; 
	}
	
<<<<<<< HEAD
	public void hashPassword(String password) {
		
//		String hashedPassword;
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			md.update(password.getBytes());
			
			// create a string format of hash
//			byte[] digest = md.digest();			
//			hashedPassword = DatatypeConverter.printHexBinary(digest);
			
//			System.out.println("Password: " + password);
//			System.out.println("Hashed password: " + hashedPassword);
=======
	/**
	 * Hashes the password during registration using SHA1 algorithm
	 * @param password takes the new password as an argument
	 * @deprecated due to equivalent method in UserTable class
	 */
	public void hashPassword(String password) {
		
		String hashedPassword;
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA1");
			md.update(password.getBytes());
			
			// create a string format of hash
			byte[] digest = md.digest();			
			hashedPassword = DatatypeConverter.printHexBinary(digest);
			
			// update the password
			this.password = hashedPassword;
>>>>>>> master
			
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
<<<<<<< HEAD
=======
	/**
	 * Checks if the password entered by the user matches the current one.
	 * @param passwordEntered this is the password entered by the user during login
	 * @return returns true if the password matches, false if it does not.
	 */
>>>>>>> master
	public boolean passwordMatches(String passwordEntered) {
		
		hashPassword(passwordEntered);
		
		if(password.equals(passwordEntered))
			return true;
		
		return false;
	}
	
	@Override
	public String toString()
	{
		return "Email: " + email + "\n" + "Password: " + password + "\n";
	}

<<<<<<< HEAD
>>>>>>> master
=======
>>>>>>> master
}